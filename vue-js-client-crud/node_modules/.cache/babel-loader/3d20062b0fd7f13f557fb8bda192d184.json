{"remainingRequest":"/home/aniruddha/Desktop/push-vue/vue-js-client-crud/node_modules/babel-loader/lib/index.js!/home/aniruddha/Desktop/push-vue/vue-js-client-crud/node_modules/vuetify/lib/components/VMenu/VMenu.js","dependencies":[{"path":"/home/aniruddha/Desktop/push-vue/vue-js-client-crud/node_modules/vuetify/lib/components/VMenu/VMenu.js","mtime":499162500000},{"path":"/home/aniruddha/Desktop/push-vue/vue-js-client-crud/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/aniruddha/Desktop/push-vue/vue-js-client-crud/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICIvaG9tZS9hbmlydWRkaGEvRGVza3RvcC9wdXNoLXZ1ZS92dWUtanMtY2xpZW50LWNydWQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5IjsKaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvaG9tZS9hbmlydWRkaGEvRGVza3RvcC9wdXNoLXZ1ZS92dWUtanMtY2xpZW50LWNydWQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5IjsKaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL2hvbWUvYW5pcnVkZGhhL0Rlc2t0b3AvcHVzaC12dWUvdnVlLWpzLWNsaWVudC1jcnVkL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZyb20uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzLmpzIjsKLy8gU3R5bGVzCmltcG9ydCAiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVk1lbnUvVk1lbnUuc2FzcyI7IC8vIENvbXBvbmVudHMKCmltcG9ydCB7IFZUaGVtZVByb3ZpZGVyIH0gZnJvbSAnLi4vVlRoZW1lUHJvdmlkZXInOyAvLyBNaXhpbnMKCmltcG9ydCBBY3RpdmF0YWJsZSBmcm9tICcuLi8uLi9taXhpbnMvYWN0aXZhdGFibGUnOwppbXBvcnQgRGVsYXlhYmxlIGZyb20gJy4uLy4uL21peGlucy9kZWxheWFibGUnOwppbXBvcnQgRGVwZW5kZW50IGZyb20gJy4uLy4uL21peGlucy9kZXBlbmRlbnQnOwppbXBvcnQgTWVudWFibGUgZnJvbSAnLi4vLi4vbWl4aW5zL21lbnVhYmxlJzsKaW1wb3J0IFJldHVybmFibGUgZnJvbSAnLi4vLi4vbWl4aW5zL3JldHVybmFibGUnOwppbXBvcnQgUm91bmRhYmxlIGZyb20gJy4uLy4uL21peGlucy9yb3VuZGFibGUnOwppbXBvcnQgVG9nZ2xlYWJsZSBmcm9tICcuLi8uLi9taXhpbnMvdG9nZ2xlYWJsZSc7CmltcG9ydCBUaGVtZWFibGUgZnJvbSAnLi4vLi4vbWl4aW5zL3RoZW1lYWJsZSc7IC8vIERpcmVjdGl2ZXMKCmltcG9ydCBDbGlja091dHNpZGUgZnJvbSAnLi4vLi4vZGlyZWN0aXZlcy9jbGljay1vdXRzaWRlJzsKaW1wb3J0IFJlc2l6ZSBmcm9tICcuLi8uLi9kaXJlY3RpdmVzL3Jlc2l6ZSc7IC8vIFV0aWxpdGllcwoKaW1wb3J0IG1peGlucyBmcm9tICcuLi8uLi91dGlsL21peGlucyc7CmltcG9ydCB7IHJlbW92ZWQgfSBmcm9tICcuLi8uLi91dGlsL2NvbnNvbGUnOwppbXBvcnQgeyBjb252ZXJ0VG9Vbml0LCBrZXlDb2RlcyB9IGZyb20gJy4uLy4uL3V0aWwvaGVscGVycyc7CmltcG9ydCBnb1RvIGZyb20gJy4uLy4uL3NlcnZpY2VzL2dvdG8nOwp2YXIgYmFzZU1peGlucyA9IG1peGlucyhEZXBlbmRlbnQsIERlbGF5YWJsZSwgTWVudWFibGUsIFJldHVybmFibGUsIFJvdW5kYWJsZSwgVG9nZ2xlYWJsZSwgVGhlbWVhYmxlKTsKLyogQHZ1ZS9jb21wb25lbnQgKi8KCmV4cG9ydCBkZWZhdWx0IGJhc2VNaXhpbnMuZXh0ZW5kKHsKICBuYW1lOiAndi1tZW51JywKICBkaXJlY3RpdmVzOiB7CiAgICBDbGlja091dHNpZGU6IENsaWNrT3V0c2lkZSwKICAgIFJlc2l6ZTogUmVzaXplCiAgfSwKICBwcm92aWRlOiBmdW5jdGlvbiBwcm92aWRlKCkgewogICAgcmV0dXJuIHsKICAgICAgaXNJbk1lbnU6IHRydWUsCiAgICAgIC8vIFBhc3MgdGhlbWUgdGhyb3VnaCB0byBkZWZhdWx0IHNsb3QKICAgICAgdGhlbWU6IHRoaXMudGhlbWUKICAgIH07CiAgfSwKICBwcm9wczogewogICAgYXV0bzogQm9vbGVhbiwKICAgIGNsb3NlT25DbGljazogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiB0cnVlCiAgICB9LAogICAgY2xvc2VPbkNvbnRlbnRDbGljazogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiB0cnVlCiAgICB9LAogICAgZGlzYWJsZWQ6IEJvb2xlYW4sCiAgICBkaXNhYmxlS2V5czogQm9vbGVhbiwKICAgIG1heEhlaWdodDogewogICAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLAogICAgICBkZWZhdWx0OiAnYXV0bycKICAgIH0sCiAgICBvZmZzZXRYOiBCb29sZWFuLAogICAgb2Zmc2V0WTogQm9vbGVhbiwKICAgIG9wZW5PbkNsaWNrOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IHRydWUKICAgIH0sCiAgICBvcGVuT25Ib3ZlcjogQm9vbGVhbiwKICAgIG9yaWdpbjogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICd0b3AgbGVmdCcKICAgIH0sCiAgICB0cmFuc2l0aW9uOiB7CiAgICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmddLAogICAgICBkZWZhdWx0OiAndi1tZW51LXRyYW5zaXRpb24nCiAgICB9CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgY2FsY3VsYXRlZFRvcEF1dG86IDAsCiAgICAgIGRlZmF1bHRPZmZzZXQ6IDgsCiAgICAgIGhhc0p1c3RGb2N1c2VkOiBmYWxzZSwKICAgICAgbGlzdEluZGV4OiAtMSwKICAgICAgcmVzaXplVGltZW91dDogMCwKICAgICAgc2VsZWN0ZWRJbmRleDogbnVsbCwKICAgICAgdGlsZXM6IFtdCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGFjdGl2ZVRpbGU6IGZ1bmN0aW9uIGFjdGl2ZVRpbGUoKSB7CiAgICAgIHJldHVybiB0aGlzLnRpbGVzW3RoaXMubGlzdEluZGV4XTsKICAgIH0sCiAgICBjYWxjdWxhdGVkTGVmdDogZnVuY3Rpb24gY2FsY3VsYXRlZExlZnQoKSB7CiAgICAgIHZhciBtZW51V2lkdGggPSBNYXRoLm1heCh0aGlzLmRpbWVuc2lvbnMuY29udGVudC53aWR0aCwgcGFyc2VGbG9hdCh0aGlzLmNhbGN1bGF0ZWRNaW5XaWR0aCkpOwogICAgICBpZiAoIXRoaXMuYXV0bykgcmV0dXJuIHRoaXMuY2FsY0xlZnQobWVudVdpZHRoKSB8fCAnMCc7CiAgICAgIHJldHVybiBjb252ZXJ0VG9Vbml0KHRoaXMuY2FsY1hPdmVyZmxvdyh0aGlzLmNhbGNMZWZ0QXV0bygpLCBtZW51V2lkdGgpKSB8fCAnMCc7CiAgICB9LAogICAgY2FsY3VsYXRlZE1heEhlaWdodDogZnVuY3Rpb24gY2FsY3VsYXRlZE1heEhlaWdodCgpIHsKICAgICAgdmFyIGhlaWdodCA9IHRoaXMuYXV0byA/ICcyMDBweCcgOiBjb252ZXJ0VG9Vbml0KHRoaXMubWF4SGVpZ2h0KTsKICAgICAgcmV0dXJuIGhlaWdodCB8fCAnMCc7CiAgICB9LAogICAgY2FsY3VsYXRlZE1heFdpZHRoOiBmdW5jdGlvbiBjYWxjdWxhdGVkTWF4V2lkdGgoKSB7CiAgICAgIHJldHVybiBjb252ZXJ0VG9Vbml0KHRoaXMubWF4V2lkdGgpIHx8ICcwJzsKICAgIH0sCiAgICBjYWxjdWxhdGVkTWluV2lkdGg6IGZ1bmN0aW9uIGNhbGN1bGF0ZWRNaW5XaWR0aCgpIHsKICAgICAgaWYgKHRoaXMubWluV2lkdGgpIHsKICAgICAgICByZXR1cm4gY29udmVydFRvVW5pdCh0aGlzLm1pbldpZHRoKSB8fCAnMCc7CiAgICAgIH0KCiAgICAgIHZhciBtaW5XaWR0aCA9IE1hdGgubWluKHRoaXMuZGltZW5zaW9ucy5hY3RpdmF0b3Iud2lkdGggKyBOdW1iZXIodGhpcy5udWRnZVdpZHRoKSArICh0aGlzLmF1dG8gPyAxNiA6IDApLCBNYXRoLm1heCh0aGlzLnBhZ2VXaWR0aCAtIDI0LCAwKSk7CiAgICAgIHZhciBjYWxjdWxhdGVkTWF4V2lkdGggPSBpc05hTihwYXJzZUludCh0aGlzLmNhbGN1bGF0ZWRNYXhXaWR0aCkpID8gbWluV2lkdGggOiBwYXJzZUludCh0aGlzLmNhbGN1bGF0ZWRNYXhXaWR0aCk7CiAgICAgIHJldHVybiBjb252ZXJ0VG9Vbml0KE1hdGgubWluKGNhbGN1bGF0ZWRNYXhXaWR0aCwgbWluV2lkdGgpKSB8fCAnMCc7CiAgICB9LAogICAgY2FsY3VsYXRlZFRvcDogZnVuY3Rpb24gY2FsY3VsYXRlZFRvcCgpIHsKICAgICAgdmFyIHRvcCA9ICF0aGlzLmF1dG8gPyB0aGlzLmNhbGNUb3AoKSA6IGNvbnZlcnRUb1VuaXQodGhpcy5jYWxjWU92ZXJmbG93KHRoaXMuY2FsY3VsYXRlZFRvcEF1dG8pKTsKICAgICAgcmV0dXJuIHRvcCB8fCAnMCc7CiAgICB9LAogICAgaGFzQ2xpY2thYmxlVGlsZXM6IGZ1bmN0aW9uIGhhc0NsaWNrYWJsZVRpbGVzKCkgewogICAgICByZXR1cm4gQm9vbGVhbih0aGlzLnRpbGVzLmZpbmQoZnVuY3Rpb24gKHRpbGUpIHsKICAgICAgICByZXR1cm4gdGlsZS50YWJJbmRleCA+IC0xOwogICAgICB9KSk7CiAgICB9LAogICAgc3R5bGVzOiBmdW5jdGlvbiBzdHlsZXMoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgbWF4SGVpZ2h0OiB0aGlzLmNhbGN1bGF0ZWRNYXhIZWlnaHQsCiAgICAgICAgbWluV2lkdGg6IHRoaXMuY2FsY3VsYXRlZE1pbldpZHRoLAogICAgICAgIG1heFdpZHRoOiB0aGlzLmNhbGN1bGF0ZWRNYXhXaWR0aCwKICAgICAgICB0b3A6IHRoaXMuY2FsY3VsYXRlZFRvcCwKICAgICAgICBsZWZ0OiB0aGlzLmNhbGN1bGF0ZWRMZWZ0LAogICAgICAgIHRyYW5zZm9ybU9yaWdpbjogdGhpcy5vcmlnaW4sCiAgICAgICAgekluZGV4OiB0aGlzLnpJbmRleCB8fCB0aGlzLmFjdGl2ZVpJbmRleAogICAgICB9OwogICAgfQogIH0sCiAgd2F0Y2g6IHsKICAgIGlzQWN0aXZlOiBmdW5jdGlvbiBpc0FjdGl2ZSh2YWwpIHsKICAgICAgaWYgKCF2YWwpIHRoaXMubGlzdEluZGV4ID0gLTE7CiAgICB9LAogICAgaXNDb250ZW50QWN0aXZlOiBmdW5jdGlvbiBpc0NvbnRlbnRBY3RpdmUodmFsKSB7CiAgICAgIHRoaXMuaGFzSnVzdEZvY3VzZWQgPSB2YWw7CiAgICB9LAogICAgbGlzdEluZGV4OiBmdW5jdGlvbiBsaXN0SW5kZXgobmV4dCwgcHJldikgewogICAgICBpZiAobmV4dCBpbiB0aGlzLnRpbGVzKSB7CiAgICAgICAgdmFyIHRpbGUgPSB0aGlzLnRpbGVzW25leHRdOwogICAgICAgIHRpbGUuY2xhc3NMaXN0LmFkZCgndi1saXN0LWl0ZW0tLWhpZ2hsaWdodGVkJyk7CiAgICAgICAgdmFyIHNjcm9sbFRvcCA9IHRoaXMuJHJlZnMuY29udGVudC5zY3JvbGxUb3A7CiAgICAgICAgdmFyIGNvbnRlbnRIZWlnaHQgPSB0aGlzLiRyZWZzLmNvbnRlbnQuY2xpZW50SGVpZ2h0OwoKICAgICAgICBpZiAoc2Nyb2xsVG9wID4gdGlsZS5vZmZzZXRUb3AgLSA4KSB7CiAgICAgICAgICBnb1RvKHRpbGUub2Zmc2V0VG9wIC0gdGlsZS5jbGllbnRIZWlnaHQsIHsKICAgICAgICAgICAgYXBwT2Zmc2V0OiBmYWxzZSwKICAgICAgICAgICAgZHVyYXRpb246IDMwMCwKICAgICAgICAgICAgY29udGFpbmVyOiB0aGlzLiRyZWZzLmNvbnRlbnQKICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSBpZiAoc2Nyb2xsVG9wICsgY29udGVudEhlaWdodCA8IHRpbGUub2Zmc2V0VG9wICsgdGlsZS5jbGllbnRIZWlnaHQgKyA4KSB7CiAgICAgICAgICBnb1RvKHRpbGUub2Zmc2V0VG9wIC0gY29udGVudEhlaWdodCArIHRpbGUuY2xpZW50SGVpZ2h0ICogMiwgewogICAgICAgICAgICBhcHBPZmZzZXQ6IGZhbHNlLAogICAgICAgICAgICBkdXJhdGlvbjogMzAwLAogICAgICAgICAgICBjb250YWluZXI6IHRoaXMuJHJlZnMuY29udGVudAogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9CgogICAgICBwcmV2IGluIHRoaXMudGlsZXMgJiYgdGhpcy50aWxlc1twcmV2XS5jbGFzc0xpc3QucmVtb3ZlKCd2LWxpc3QtaXRlbS0taGlnaGxpZ2h0ZWQnKTsKICAgIH0KICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLwogICAgaWYgKHRoaXMuJGF0dHJzLmhhc093blByb3BlcnR5KCdmdWxsLXdpZHRoJykpIHsKICAgICAgcmVtb3ZlZCgnZnVsbC13aWR0aCcsIHRoaXMpOwogICAgfQogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHRoaXMuaXNBY3RpdmUgJiYgdGhpcy5jYWxsQWN0aXZhdGUoKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGFjdGl2YXRlOiBmdW5jdGlvbiBhY3RpdmF0ZSgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIC8vIFVwZGF0ZSBjb29yZGluYXRlcyBhbmQgZGltZW5zaW9ucyBvZiBtZW51CiAgICAgIC8vIGFuZCBpdHMgYWN0aXZhdG9yCiAgICAgIHRoaXMudXBkYXRlRGltZW5zaW9ucygpOyAvLyBTdGFydCB0aGUgdHJhbnNpdGlvbgoKICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHsKICAgICAgICAvLyBPbmNlIHRyYW5zaXRpb25pbmcsIGNhbGN1bGF0ZSBzY3JvbGwgYW5kIHRvcCBwb3NpdGlvbgogICAgICAgIF90aGlzLnN0YXJ0VHJhbnNpdGlvbigpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgaWYgKF90aGlzLiRyZWZzLmNvbnRlbnQpIHsKICAgICAgICAgICAgX3RoaXMuY2FsY3VsYXRlZFRvcEF1dG8gPSBfdGhpcy5jYWxjVG9wQXV0bygpOwogICAgICAgICAgICBfdGhpcy5hdXRvICYmIChfdGhpcy4kcmVmcy5jb250ZW50LnNjcm9sbFRvcCA9IF90aGlzLmNhbGNTY3JvbGxQb3NpdGlvbigpKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LAogICAgY2FsY1Njcm9sbFBvc2l0aW9uOiBmdW5jdGlvbiBjYWxjU2Nyb2xsUG9zaXRpb24oKSB7CiAgICAgIHZhciAkZWwgPSB0aGlzLiRyZWZzLmNvbnRlbnQ7CiAgICAgIHZhciBhY3RpdmVUaWxlID0gJGVsLnF1ZXJ5U2VsZWN0b3IoJy52LWxpc3QtaXRlbS0tYWN0aXZlJyk7CiAgICAgIHZhciBtYXhTY3JvbGxUb3AgPSAkZWwuc2Nyb2xsSGVpZ2h0IC0gJGVsLm9mZnNldEhlaWdodDsKICAgICAgcmV0dXJuIGFjdGl2ZVRpbGUgPyBNYXRoLm1pbihtYXhTY3JvbGxUb3AsIE1hdGgubWF4KDAsIGFjdGl2ZVRpbGUub2Zmc2V0VG9wIC0gJGVsLm9mZnNldEhlaWdodCAvIDIgKyBhY3RpdmVUaWxlLm9mZnNldEhlaWdodCAvIDIpKSA6ICRlbC5zY3JvbGxUb3A7CiAgICB9LAogICAgY2FsY0xlZnRBdXRvOiBmdW5jdGlvbiBjYWxjTGVmdEF1dG8oKSB7CiAgICAgIHJldHVybiBwYXJzZUludCh0aGlzLmRpbWVuc2lvbnMuYWN0aXZhdG9yLmxlZnQgLSB0aGlzLmRlZmF1bHRPZmZzZXQgKiAyKTsKICAgIH0sCiAgICBjYWxjVG9wQXV0bzogZnVuY3Rpb24gY2FsY1RvcEF1dG8oKSB7CiAgICAgIHZhciAkZWwgPSB0aGlzLiRyZWZzLmNvbnRlbnQ7CiAgICAgIHZhciBhY3RpdmVUaWxlID0gJGVsLnF1ZXJ5U2VsZWN0b3IoJy52LWxpc3QtaXRlbS0tYWN0aXZlJyk7CgogICAgICBpZiAoIWFjdGl2ZVRpbGUpIHsKICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSBudWxsOwogICAgICB9CgogICAgICBpZiAodGhpcy5vZmZzZXRZIHx8ICFhY3RpdmVUaWxlKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY29tcHV0ZWRUb3A7CiAgICAgIH0KCiAgICAgIHRoaXMuc2VsZWN0ZWRJbmRleCA9IEFycmF5LmZyb20odGhpcy50aWxlcykuaW5kZXhPZihhY3RpdmVUaWxlKTsKICAgICAgdmFyIHRpbGVEaXN0YW5jZUZyb21NZW51VG9wID0gYWN0aXZlVGlsZS5vZmZzZXRUb3AgLSB0aGlzLmNhbGNTY3JvbGxQb3NpdGlvbigpOwogICAgICB2YXIgZmlyc3RUaWxlT2Zmc2V0VG9wID0gJGVsLnF1ZXJ5U2VsZWN0b3IoJy52LWxpc3QtaXRlbScpLm9mZnNldFRvcDsKICAgICAgcmV0dXJuIHRoaXMuY29tcHV0ZWRUb3AgLSB0aWxlRGlzdGFuY2VGcm9tTWVudVRvcCAtIGZpcnN0VGlsZU9mZnNldFRvcCAtIDE7CiAgICB9LAogICAgY2hhbmdlTGlzdEluZGV4OiBmdW5jdGlvbiBjaGFuZ2VMaXN0SW5kZXgoZSkgewogICAgICAvLyBGb3IgaW5maW5pdGUgc2Nyb2xsIGFuZCBhdXRvY29tcGxldGUsIHJlLWV2YWx1YXRlIGNoaWxkcmVuCiAgICAgIHRoaXMuZ2V0VGlsZXMoKTsKCiAgICAgIGlmICghdGhpcy5pc0FjdGl2ZSB8fCAhdGhpcy5oYXNDbGlja2FibGVUaWxlcykgewogICAgICAgIHJldHVybjsKICAgICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IGtleUNvZGVzLnRhYikgewogICAgICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTsKICAgICAgICByZXR1cm47CiAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSBrZXlDb2Rlcy5kb3duKSB7CiAgICAgICAgdGhpcy5uZXh0VGlsZSgpOwogICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0ga2V5Q29kZXMudXApIHsKICAgICAgICB0aGlzLnByZXZUaWxlKCk7CiAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSBrZXlDb2Rlcy5lbmQpIHsKICAgICAgICB0aGlzLmxhc3RUaWxlKCk7CiAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSBrZXlDb2Rlcy5ob21lKSB7CiAgICAgICAgdGhpcy5maXJzdFRpbGUoKTsKICAgICAgfSBlbHNlIGlmIChlLmtleUNvZGUgPT09IGtleUNvZGVzLmVudGVyICYmIHRoaXMubGlzdEluZGV4ICE9PSAtMSkgewogICAgICAgIHRoaXMudGlsZXNbdGhpcy5saXN0SW5kZXhdLmNsaWNrKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9IC8vIE9uZSBvZiB0aGUgY29uZGl0aW9ucyB3YXMgbWV0LCBwcmV2ZW50IGRlZmF1bHQgYWN0aW9uICgjMjk4OCkKCgogICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICB9LAogICAgY2xvc2VDb25kaXRpb25hbDogZnVuY3Rpb24gY2xvc2VDb25kaXRpb25hbChlKSB7CiAgICAgIHZhciB0YXJnZXQgPSBlLnRhcmdldDsKICAgICAgcmV0dXJuIHRoaXMuaXNBY3RpdmUgJiYgIXRoaXMuX2lzRGVzdHJveWVkICYmIHRoaXMuY2xvc2VPbkNsaWNrICYmICF0aGlzLiRyZWZzLmNvbnRlbnQuY29udGFpbnModGFyZ2V0KTsKICAgIH0sCiAgICBnZW5BY3RpdmF0b3JBdHRyaWJ1dGVzOiBmdW5jdGlvbiBnZW5BY3RpdmF0b3JBdHRyaWJ1dGVzKCkgewogICAgICB2YXIgYXR0cmlidXRlcyA9IEFjdGl2YXRhYmxlLm9wdGlvbnMubWV0aG9kcy5nZW5BY3RpdmF0b3JBdHRyaWJ1dGVzLmNhbGwodGhpcyk7CgogICAgICBpZiAodGhpcy5hY3RpdmVUaWxlICYmIHRoaXMuYWN0aXZlVGlsZS5pZCkgewogICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGF0dHJpYnV0ZXMpLCB7fSwgewogICAgICAgICAgJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCc6IHRoaXMuYWN0aXZlVGlsZS5pZAogICAgICAgIH0pOwogICAgICB9CgogICAgICByZXR1cm4gYXR0cmlidXRlczsKICAgIH0sCiAgICBnZW5BY3RpdmF0b3JMaXN0ZW5lcnM6IGZ1bmN0aW9uIGdlbkFjdGl2YXRvckxpc3RlbmVycygpIHsKICAgICAgdmFyIGxpc3RlbmVycyA9IE1lbnVhYmxlLm9wdGlvbnMubWV0aG9kcy5nZW5BY3RpdmF0b3JMaXN0ZW5lcnMuY2FsbCh0aGlzKTsKCiAgICAgIGlmICghdGhpcy5kaXNhYmxlS2V5cykgewogICAgICAgIGxpc3RlbmVycy5rZXlkb3duID0gdGhpcy5vbktleURvd247CiAgICAgIH0KCiAgICAgIHJldHVybiBsaXN0ZW5lcnM7CiAgICB9LAogICAgZ2VuVHJhbnNpdGlvbjogZnVuY3Rpb24gZ2VuVHJhbnNpdGlvbigpIHsKICAgICAgdmFyIGNvbnRlbnQgPSB0aGlzLmdlbkNvbnRlbnQoKTsKICAgICAgaWYgKCF0aGlzLnRyYW5zaXRpb24pIHJldHVybiBjb250ZW50OwogICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgndHJhbnNpdGlvbicsIHsKICAgICAgICBwcm9wczogewogICAgICAgICAgbmFtZTogdGhpcy50cmFuc2l0aW9uCiAgICAgICAgfQogICAgICB9LCBbY29udGVudF0pOwogICAgfSwKICAgIGdlbkRpcmVjdGl2ZXM6IGZ1bmN0aW9uIGdlbkRpcmVjdGl2ZXMoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdmFyIGRpcmVjdGl2ZXMgPSBbewogICAgICAgIG5hbWU6ICdzaG93JywKICAgICAgICB2YWx1ZTogdGhpcy5pc0NvbnRlbnRBY3RpdmUKICAgICAgfV07IC8vIERvIG5vdCBhZGQgY2xpY2sgb3V0c2lkZSBmb3IgaG92ZXIgbWVudQoKICAgICAgaWYgKCF0aGlzLm9wZW5PbkhvdmVyICYmIHRoaXMuY2xvc2VPbkNsaWNrKSB7CiAgICAgICAgZGlyZWN0aXZlcy5wdXNoKHsKICAgICAgICAgIG5hbWU6ICdjbGljay1vdXRzaWRlJywKICAgICAgICAgIHZhbHVlOiB7CiAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoKSB7CiAgICAgICAgICAgICAgX3RoaXMyLmlzQWN0aXZlID0gZmFsc2U7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNsb3NlQ29uZGl0aW9uYWw6IHRoaXMuY2xvc2VDb25kaXRpb25hbCwKICAgICAgICAgICAgaW5jbHVkZTogZnVuY3Rpb24gaW5jbHVkZSgpIHsKICAgICAgICAgICAgICByZXR1cm4gW190aGlzMi4kZWxdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoX3RoaXMyLmdldE9wZW5EZXBlbmRlbnRFbGVtZW50cygpKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQoKICAgICAgcmV0dXJuIGRpcmVjdGl2ZXM7CiAgICB9LAogICAgZ2VuQ29udGVudDogZnVuY3Rpb24gZ2VuQ29udGVudCgpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB2YXIgb3B0aW9ucyA9IHsKICAgICAgICBhdHRyczogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLmdldFNjb3BlSWRBdHRycygpKSwge30sIHsKICAgICAgICAgIHJvbGU6ICdyb2xlJyBpbiB0aGlzLiRhdHRycyA/IHRoaXMuJGF0dHJzLnJvbGUgOiAnbWVudScKICAgICAgICB9KSwKICAgICAgICBzdGF0aWNDbGFzczogJ3YtbWVudV9fY29udGVudCcsCiAgICAgICAgY2xhc3M6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLnJvb3RUaGVtZUNsYXNzZXMpLCB0aGlzLnJvdW5kZWRDbGFzc2VzKSwge30sIF9kZWZpbmVQcm9wZXJ0eSh7CiAgICAgICAgICAndi1tZW51X19jb250ZW50LS1hdXRvJzogdGhpcy5hdXRvLAogICAgICAgICAgJ3YtbWVudV9fY29udGVudC0tZml4ZWQnOiB0aGlzLmFjdGl2YXRvckZpeGVkLAogICAgICAgICAgbWVudWFibGVfX2NvbnRlbnRfX2FjdGl2ZTogdGhpcy5pc0FjdGl2ZQogICAgICAgIH0sIHRoaXMuY29udGVudENsYXNzLnRyaW0oKSwgdHJ1ZSkpLAogICAgICAgIHN0eWxlOiB0aGlzLnN0eWxlcywKICAgICAgICBkaXJlY3RpdmVzOiB0aGlzLmdlbkRpcmVjdGl2ZXMoKSwKICAgICAgICByZWY6ICdjb250ZW50JywKICAgICAgICBvbjogewogICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uIGNsaWNrKGUpIHsKICAgICAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0OwogICAgICAgICAgICBpZiAodGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGlzYWJsZWQnKSkgcmV0dXJuOwogICAgICAgICAgICBpZiAoX3RoaXMzLmNsb3NlT25Db250ZW50Q2xpY2spIF90aGlzMy5pc0FjdGl2ZSA9IGZhbHNlOwogICAgICAgICAgfSwKICAgICAgICAgIGtleWRvd246IHRoaXMub25LZXlEb3duCiAgICAgICAgfQogICAgICB9OwoKICAgICAgaWYgKHRoaXMuJGxpc3RlbmVycy5zY3JvbGwpIHsKICAgICAgICBvcHRpb25zLm9uID0gb3B0aW9ucy5vbiB8fCB7fTsKICAgICAgICBvcHRpb25zLm9uLnNjcm9sbCA9IHRoaXMuJGxpc3RlbmVycy5zY3JvbGw7CiAgICAgIH0KCiAgICAgIGlmICghdGhpcy5kaXNhYmxlZCAmJiB0aGlzLm9wZW5PbkhvdmVyKSB7CiAgICAgICAgb3B0aW9ucy5vbiA9IG9wdGlvbnMub24gfHwge307CiAgICAgICAgb3B0aW9ucy5vbi5tb3VzZWVudGVyID0gdGhpcy5tb3VzZUVudGVySGFuZGxlcjsKICAgICAgfQoKICAgICAgaWYgKHRoaXMub3Blbk9uSG92ZXIpIHsKICAgICAgICBvcHRpb25zLm9uID0gb3B0aW9ucy5vbiB8fCB7fTsKICAgICAgICBvcHRpb25zLm9uLm1vdXNlbGVhdmUgPSB0aGlzLm1vdXNlTGVhdmVIYW5kbGVyOwogICAgICB9CgogICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgnZGl2Jywgb3B0aW9ucywgdGhpcy5nZXRDb250ZW50U2xvdCgpKTsKICAgIH0sCiAgICBnZXRUaWxlczogZnVuY3Rpb24gZ2V0VGlsZXMoKSB7CiAgICAgIGlmICghdGhpcy4kcmVmcy5jb250ZW50KSByZXR1cm47CiAgICAgIHRoaXMudGlsZXMgPSBBcnJheS5mcm9tKHRoaXMuJHJlZnMuY29udGVudC5xdWVyeVNlbGVjdG9yQWxsKCcudi1saXN0LWl0ZW0nKSk7CiAgICB9LAogICAgbW91c2VFbnRlckhhbmRsZXI6IGZ1bmN0aW9uIG1vdXNlRW50ZXJIYW5kbGVyKCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIHRoaXMucnVuRGVsYXkoJ29wZW4nLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKF90aGlzNC5oYXNKdXN0Rm9jdXNlZCkgcmV0dXJuOwogICAgICAgIF90aGlzNC5oYXNKdXN0Rm9jdXNlZCA9IHRydWU7CiAgICAgIH0pOwogICAgfSwKICAgIG1vdXNlTGVhdmVIYW5kbGVyOiBmdW5jdGlvbiBtb3VzZUxlYXZlSGFuZGxlcihlKSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwoKICAgICAgLy8gUHJldmVudCBhY2NpZGVudGFsIHJlLWFjdGl2YXRpb24KICAgICAgdGhpcy5ydW5EZWxheSgnY2xvc2UnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKF90aGlzNS4kcmVmcy5jb250ZW50LmNvbnRhaW5zKGUucmVsYXRlZFRhcmdldCkpIHJldHVybjsKICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkgewogICAgICAgICAgX3RoaXM1LmlzQWN0aXZlID0gZmFsc2U7CgogICAgICAgICAgX3RoaXM1LmNhbGxEZWFjdGl2YXRlKCk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSwKICAgIG5leHRUaWxlOiBmdW5jdGlvbiBuZXh0VGlsZSgpIHsKICAgICAgdmFyIHRpbGUgPSB0aGlzLnRpbGVzW3RoaXMubGlzdEluZGV4ICsgMV07CgogICAgICBpZiAoIXRpbGUpIHsKICAgICAgICBpZiAoIXRoaXMudGlsZXMubGVuZ3RoKSByZXR1cm47CiAgICAgICAgdGhpcy5saXN0SW5kZXggPSAtMTsKICAgICAgICB0aGlzLm5leHRUaWxlKCk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB0aGlzLmxpc3RJbmRleCsrOwogICAgICBpZiAodGlsZS50YWJJbmRleCA9PT0gLTEpIHRoaXMubmV4dFRpbGUoKTsKICAgIH0sCiAgICBwcmV2VGlsZTogZnVuY3Rpb24gcHJldlRpbGUoKSB7CiAgICAgIHZhciB0aWxlID0gdGhpcy50aWxlc1t0aGlzLmxpc3RJbmRleCAtIDFdOwoKICAgICAgaWYgKCF0aWxlKSB7CiAgICAgICAgaWYgKCF0aGlzLnRpbGVzLmxlbmd0aCkgcmV0dXJuOwogICAgICAgIHRoaXMubGlzdEluZGV4ID0gdGhpcy50aWxlcy5sZW5ndGg7CiAgICAgICAgdGhpcy5wcmV2VGlsZSgpOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdGhpcy5saXN0SW5kZXgtLTsKICAgICAgaWYgKHRpbGUudGFiSW5kZXggPT09IC0xKSB0aGlzLnByZXZUaWxlKCk7CiAgICB9LAogICAgbGFzdFRpbGU6IGZ1bmN0aW9uIGxhc3RUaWxlKCkgewogICAgICB2YXIgdGlsZSA9IHRoaXMudGlsZXNbdGhpcy50aWxlcy5sZW5ndGggLSAxXTsKICAgICAgaWYgKCF0aWxlKSByZXR1cm47CiAgICAgIHRoaXMubGlzdEluZGV4ID0gdGhpcy50aWxlcy5sZW5ndGggLSAxOwogICAgICBpZiAodGlsZS50YWJJbmRleCA9PT0gLTEpIHRoaXMucHJldlRpbGUoKTsKICAgIH0sCiAgICBmaXJzdFRpbGU6IGZ1bmN0aW9uIGZpcnN0VGlsZSgpIHsKICAgICAgdmFyIHRpbGUgPSB0aGlzLnRpbGVzWzBdOwogICAgICBpZiAoIXRpbGUpIHJldHVybjsKICAgICAgdGhpcy5saXN0SW5kZXggPSAwOwogICAgICBpZiAodGlsZS50YWJJbmRleCA9PT0gLTEpIHRoaXMubmV4dFRpbGUoKTsKICAgIH0sCiAgICBvbktleURvd246IGZ1bmN0aW9uIG9uS2V5RG93bihlKSB7CiAgICAgIHZhciBfdGhpczYgPSB0aGlzOwoKICAgICAgaWYgKGUua2V5Q29kZSA9PT0ga2V5Q29kZXMuZXNjKSB7CiAgICAgICAgLy8gV2FpdCBmb3IgZGVwZW5kZW50IGVsZW1lbnRzIHRvIGNsb3NlIGZpcnN0CiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICBfdGhpczYuaXNBY3RpdmUgPSBmYWxzZTsKICAgICAgICB9KTsKICAgICAgICB2YXIgYWN0aXZhdG9yID0gdGhpcy5nZXRBY3RpdmF0b3IoKTsKICAgICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gYWN0aXZhdG9yICYmIGFjdGl2YXRvci5mb2N1cygpOwogICAgICAgIH0pOwogICAgICB9IGVsc2UgaWYgKCF0aGlzLmlzQWN0aXZlICYmIFtrZXlDb2Rlcy51cCwga2V5Q29kZXMuZG93bl0uaW5jbHVkZXMoZS5rZXlDb2RlKSkgewogICAgICAgIHRoaXMuaXNBY3RpdmUgPSB0cnVlOwogICAgICB9IC8vIEFsbG93IGZvciBpc0FjdGl2ZSB3YXRjaGVyIHRvIGdlbmVyYXRlIHRpbGUgbGlzdAoKCiAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gX3RoaXM2LmNoYW5nZUxpc3RJbmRleChlKTsKICAgICAgfSk7CiAgICB9LAogICAgb25SZXNpemU6IGZ1bmN0aW9uIG9uUmVzaXplKCkgewogICAgICBpZiAoIXRoaXMuaXNBY3RpdmUpIHJldHVybjsgLy8gQWNjb3VudCBmb3Igc2NyZWVuIHJlc2l6ZQogICAgICAvLyBhbmQgb3JpZW50YXRpb24gY2hhbmdlCiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnMKCiAgICAgIHRoaXMuJHJlZnMuY29udGVudC5vZmZzZXRXaWR0aDsKICAgICAgdGhpcy51cGRhdGVEaW1lbnNpb25zKCk7IC8vIFdoZW4gcmVzaXppbmcgdG8gYSBzbWFsbGVyIHdpZHRoCiAgICAgIC8vIGNvbnRlbnQgd2lkdGggaXMgZXZhbHVhdGVkIGJlZm9yZQogICAgICAvLyB0aGUgbmV3IGFjdGl2YXRvciB3aWR0aCBoYXMgYmVlbgogICAgICAvLyBzZXQsIGNhdXNpbmcgaXQgdG8gbm90IHNpemUgcHJvcGVybHkKICAgICAgLy8gaGFja3kgYnV0IHdpbGwgcmV2aXNpdCBpbiB0aGUgZnV0dXJlCgogICAgICBjbGVhclRpbWVvdXQodGhpcy5yZXNpemVUaW1lb3V0KTsKICAgICAgdGhpcy5yZXNpemVUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQodGhpcy51cGRhdGVEaW1lbnNpb25zLCAxMDApOwogICAgfQogIH0sCiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoaCkgewogICAgdmFyIF90aGlzNyA9IHRoaXM7CgogICAgdmFyIGRhdGEgPSB7CiAgICAgIHN0YXRpY0NsYXNzOiAndi1tZW51JywKICAgICAgY2xhc3M6IHsKICAgICAgICAndi1tZW51LS1hdHRhY2hlZCc6IHRoaXMuYXR0YWNoID09PSAnJyB8fCB0aGlzLmF0dGFjaCA9PT0gdHJ1ZSB8fCB0aGlzLmF0dGFjaCA9PT0gJ2F0dGFjaCcKICAgICAgfSwKICAgICAgZGlyZWN0aXZlczogW3sKICAgICAgICBhcmc6ICc1MDAnLAogICAgICAgIG5hbWU6ICdyZXNpemUnLAogICAgICAgIHZhbHVlOiB0aGlzLm9uUmVzaXplCiAgICAgIH1dCiAgICB9OwogICAgcmV0dXJuIGgoJ2RpdicsIGRhdGEsIFshdGhpcy5hY3RpdmF0b3IgJiYgdGhpcy5nZW5BY3RpdmF0b3IoKSwgdGhpcy5zaG93TGF6eUNvbnRlbnQoZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gW190aGlzNy4kY3JlYXRlRWxlbWVudChWVGhlbWVQcm92aWRlciwgewogICAgICAgIHByb3BzOiB7CiAgICAgICAgICByb290OiB0cnVlLAogICAgICAgICAgbGlnaHQ6IF90aGlzNy5saWdodCwKICAgICAgICAgIGRhcms6IF90aGlzNy5kYXJrCiAgICAgICAgfQogICAgICB9LCBbX3RoaXM3LmdlblRyYW5zaXRpb24oKV0pXTsKICAgIH0pXSk7CiAgfQp9KTs="},null]}